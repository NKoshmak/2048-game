{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.score = 0;\n        this.status = \"idle\";\n        this.initialState = initialState;\n        this.state = this.cloneState(this.initialState);\n    }\n    // --- Main Methods ---\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        if (this.status === \"idle\") {\n            this.status = \"playing\";\n            this.addRandomTile();\n            this.addRandomTile();\n        }\n    }\n    restart() {\n        this.state = this.cloneState(this.initialState);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    moveUp() {\n        this.handleMove(\"up\");\n    }\n    moveDown() {\n        this.handleMove(\"down\");\n    }\n    moveLeft() {\n        this.handleMove(\"left\");\n    }\n    moveRight() {\n        this.handleMove(\"right\");\n    }\n    // --- Additional Methods ---\n    handleMove(direction) {\n        if (this.status !== \"playing\") return;\n        const moved = this.slide(direction);\n        if (moved) {\n            this.addRandomTile();\n            this.updateGameStatus();\n        }\n    }\n    cloneState(state) {\n        return state.map((row)=>[\n                ...row\n            ]);\n    }\n    addRandomTile() {\n        const emptyTiles = this.findEmptyTiles();\n        if (emptyTiles.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyTiles.length);\n            const [row, column] = emptyTiles[randomIndex];\n            this.state[row][column] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    findEmptyTiles() {\n        const emptyTiles = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.state[row][col] === 0) emptyTiles.push([\n                row,\n                col\n            ]);\n        }\n        return emptyTiles;\n    }\n    slide(direction) {\n        const originalState = this.cloneState(this.state);\n        switch(direction){\n            case \"left\":\n                this.state = this.slideLeft(this.state);\n                break;\n            case \"right\":\n                this.state = this.slideRight(this.state);\n                break;\n            case \"up\":\n                this.state = this.transpose(this.slideLeft(this.transpose(this.state)));\n                break;\n            case \"down\":\n                this.state = this.transpose(this.slideRight(this.transpose(this.state)));\n                break;\n        }\n        return !this.areStatesEqual(this.state, originalState);\n    }\n    slideLeft(state) {\n        return state.map((row)=>this.processRow(row, true));\n    }\n    slideRight(state) {\n        return state.map((row)=>this.processRow(row, false));\n    }\n    processRow(row, isLeft) {\n        const rowCopy = isLeft ? row : [\n            ...row\n        ].reverse();\n        const newRow = this.mergeTiles(rowCopy.filter((n)=>n !== 0));\n        while(newRow.length < 4)newRow.push(0);\n        return isLeft ? newRow : newRow.reverse();\n    }\n    mergeTiles(row) {\n        for(let i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1]) {\n            row[i] *= 2;\n            row[i + 1] = 0;\n            this.score += row[i];\n        }\n        return row.filter((n)=>n !== 0);\n    }\n    areStatesEqual(state1, state2) {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (state1[row][col] !== state2[row][col]) return false;\n        }\n        return true;\n    }\n    transpose(state) {\n        const transposed = [];\n        for(let col = 0; col < 4; col++){\n            transposed[col] = [];\n            for(let row = 0; row < 4; row++)transposed[col].push(state[row][col]);\n        }\n        return transposed;\n    }\n    // --- Game Status Updates ---\n    updateGameStatus() {\n        if (this.hasReached2048()) {\n            this.status = \"win\";\n            return;\n        }\n        if (!this.hasEmptyCells() && !this.canMergeTiles()) this.status = \"lose\";\n    }\n    hasReached2048() {\n        return this.state.some((row)=>row.includes(2048));\n    }\n    hasEmptyCells() {\n        return this.state.some((row)=>row.includes(0));\n    }\n    canMergeTiles() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            const tile = this.state[row][col];\n            if (col < 3 && tile === this.state[row][col + 1] || row < 3 && tile === this.state[row + 1][col]) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$startBtn = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nfunction $09e991522ca7e64e$var$render() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    // render game cells\n    let i = 0;\n    for(let row = 0; row < 4; row++){\n        for(let column = 0; column < 4; column++){\n            const cell = $09e991522ca7e64e$var$cells[i];\n            // Reset and update cell content and class\n            cell.className = \"field-cell\";\n            if (state[row][column]) {\n                cell.textContent = state[row][column];\n                cell.classList.add(`field-cell--${state[row][column]}`);\n            } else cell.textContent = \"\";\n            i++;\n        }\n        // Update score\n        $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n        // Handle game status messages\n        if (gameStatus === \"win\") $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n        else if (gameStatus === \"lose\") $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n    }\n}\n$09e991522ca7e64e$var$startBtn.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startBtn.className === \"button restart\") $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$render();\n    $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$startBtn.textContent = \"Restart\";\n    $09e991522ca7e64e$var$startBtn.className = \"button restart\";\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        switch(e.key){\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n        }\n        $09e991522ca7e64e$var$render();\n    }\n});\n\n\n//# sourceMappingURL=index.1077be24.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst cells = document.querySelectorAll('.field-cell');\nconst startBtn = document.querySelector('.button.start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst startMessage = document.querySelector('.message-start');\nconst gameScore = document.querySelector('.game-score');\n\nfunction render() {\n  const state = game.getState();\n  const gameStatus = game.getStatus();\n\n  // render game cells\n  let i = 0;\n\n  for (let row = 0; row < 4; row++) {\n    for (let column = 0; column < 4; column++) {\n      const cell = cells[i];\n\n      // Reset and update cell content and class\n      cell.className = 'field-cell';\n\n      if (state[row][column]) {\n        cell.textContent = state[row][column];\n        cell.classList.add(`field-cell--${state[row][column]}`);\n      } else {\n        cell.textContent = '';\n      }\n      i++;\n    }\n\n    // Update score\n    gameScore.textContent = game.getScore();\n\n    // Handle game status messages\n    if (gameStatus === 'win') {\n      winMessage.classList.remove('hidden');\n    } else if (gameStatus === 'lose') {\n      loseMessage.classList.remove('hidden');\n    }\n  }\n} \n\nstartBtn.addEventListener('click', () => {\n  if (startBtn.className === 'button restart') {\n    game.restart();\n  }\n\n  game.start();\n  render();\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  startMessage.classList.add('hidden');\n  startBtn.textContent = 'Restart';\n  startBtn.className = 'button restart';\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() === 'playing') {\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n\n    render();\n  }\n});\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.score = 0;\n    this.status = 'idle';\n    this.initialState = initialState;\n    this.state = this.cloneState(this.initialState);\n  }\n\n  // --- Main Methods ---\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.status = 'playing';\n      this.addRandomTile();\n      this.addRandomTile();\n    }\n  }\n\n  restart() {\n    this.state = this.cloneState(this.initialState);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  moveUp() {\n    this.handleMove('up');\n  }\n\n  moveDown() {\n    this.handleMove('down');\n  }\n\n  moveLeft() {\n    this.handleMove('left');\n  }\n\n  moveRight() {\n    this.handleMove('right');\n  }\n\n  // --- Additional Methods ---\n  handleMove(direction) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const moved = this.slide(direction);\n\n    if (moved) {\n      this.addRandomTile();\n      this.updateGameStatus();\n    }\n  }\n\n  cloneState(state) {\n    return state.map((row) => [...row]);\n  }\n\n  addRandomTile() {\n    const emptyTiles = this.findEmptyTiles();\n\n    if (emptyTiles.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyTiles.length);\n      const [row, column] = emptyTiles[randomIndex];\n\n      this.state[row][column] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  findEmptyTiles() {\n    const emptyTiles = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 0) {\n          emptyTiles.push([row, col]);\n        }\n      }\n    }\n\n    return emptyTiles;\n  }\n\n  slide(direction) {\n    const originalState = this.cloneState(this.state);\n\n    switch (direction) {\n      case 'left':\n        this.state = this.slideLeft(this.state);\n        break;\n      case 'right':\n        this.state = this.slideRight(this.state);\n        break;\n      case 'up':\n        this.state = this.transpose(this.slideLeft(this.transpose(this.state)));\n        break;\n      case 'down':\n        this.state = this.transpose(\n          this.slideRight(this.transpose(this.state)),\n        );\n        break;\n    }\n\n    return !this.areStatesEqual(this.state, originalState);\n  }\n\n  slideLeft(state) {\n    return state.map((row) => this.processRow(row, true));\n  }\n\n  slideRight(state) {\n    return state.map((row) => this.processRow(row, false));\n  }\n\n  processRow(row, isLeft) {\n    const rowCopy = isLeft ? row : [...row].reverse();\n    const newRow = this.mergeTiles(rowCopy.filter((n) => n !== 0));\n\n    while (newRow.length < 4) {\n      newRow.push(0);\n    }\n\n    return isLeft ? newRow : newRow.reverse();\n  }\n\n  mergeTiles(row) {\n    for (let i = 0; i < row.length - 1; i++) {\n      if (row[i] === row[i + 1]) {\n        row[i] *= 2;\n        row[i + 1] = 0;\n        this.score += row[i];\n      }\n    }\n\n    return row.filter((n) => n !== 0);\n  }\n\n  areStatesEqual(state1, state2) {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (state1[row][col] !== state2[row][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  transpose(state) {\n    const transposed = [];\n\n    for (let col = 0; col < 4; col++) {\n      transposed[col] = [];\n\n      for (let row = 0; row < 4; row++) {\n        transposed[col].push(state[row][col]);\n      }\n    }\n\n    return transposed;\n  }\n\n  // --- Game Status Updates ---\n  updateGameStatus() {\n    if (this.hasReached2048()) {\n      this.status = 'win';\n\n      return;\n    }\n\n    if (!this.hasEmptyCells() && !this.canMergeTiles()) {\n      this.status = 'lose';\n    }\n  }\n\n  hasReached2048() {\n    return this.state.some((row) => row.includes(2048));\n  }\n\n  hasEmptyCells() {\n    return this.state.some((row) => row.includes(0));\n  }\n\n  canMergeTiles() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const tile = this.state[row][col];\n\n        if (\n          (col < 3 && tile === this.state[row][col + 1]) ||\n          (row < 3 && tile === this.state[row + 1][col])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","score","status","state","cloneState","getScore","getState","getStatus","start","addRandomTile","restart","moveUp","handleMove","moveDown","moveLeft","moveRight","direction","slide","updateGameStatus","map","row","emptyTiles","findEmptyTiles","length","randomIndex","Math","floor","random","column","col","push","originalState","slideLeft","slideRight","transpose","areStatesEqual","processRow","isLeft","rowCopy","reverse","newRow","mergeTiles","filter","n","i","state1","state2","transposed","hasReached2048","hasEmptyCells","canMergeTiles","some","includes","tile","$09e991522ca7e64e$var$cells","document","querySelectorAll","$09e991522ca7e64e$var$startBtn","querySelector","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$render","gameStatus","cell","className","textContent","classList","add","remove","addEventListener","e","key"],"version":3,"file":"index.1077be24.js.map"}